apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.triplet.play'

//apply from: rootProject.file('gradle/generated-kotlin-sources.gradle')

apply plugin: 'jacoco'
apply plugin: 'com.getkeepsafe.dexcount'

apply plugin: "com.github.ben-manes.versions"

apply plugin: 'org.jetbrains.kotlin.android.extensions'

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.25.2'
    }
}

apply plugin: 'io.fabric'

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        url 'https://jitpack.io'
    }
    maven {
        url "https://maven.google.com"
    }
    maven { url 'https://maven.fabric.io/public' }
    maven {
        url "https://dl.bintray.com/jereksel/maven"
    }
}

task copyTestClasses(type: Copy) {
    from "build/tmp/kotlin-classes/debugUnitTest"
    into "build/intermediates/classes/debug"
}

kapt {
    arguments {
        arg("room.schemaLocation", "$projectDir/schemas")
    }
}

def shortTag = "git rev-parse --short HEAD".execute().text.trim()

def ci = System.getenv("CI")
def buildNumber = System.getenv("BUILD_NUMBER") ?: "0"
def branch = System.getenv("BRANCH")

android {
    playAccountConfigs {
        defaultAccountConfig {
            jsonFile = file('LibreSubstratum.json')
        }
    }
    compileSdkVersion 27
    buildToolsVersion "27.0.3"
    defaultConfig {
        def version = "0.2.1"
        applicationId "com.jereksel.libresubstratum"
        minSdkVersion 24
        targetSdkVersion 27
        if (ci) {
            def code = buildNumber.toInteger()
            versionCode code
            if (branch == "master") {
                versionName version
            } else {
                versionName "${version}-BETA-${code}-${shortTag}"
            }
        } else if (project.hasProperty("fdroid")) {
            versionCode 3
            versionName version
        } else {
            versionCode 9999
            versionName "${version}-DEV"
        }

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

//        testInstrumentationRunner "com.jereksel.libresubstratum.TestAppAndroidJUnitRunner"
        manifestPlaceholders = [crashlytics: System.getenv("CRASHLYTICS_TOKEN") ?: ""]
        playAccountConfig = playAccountConfigs.defaultAccountConfig
        ndk {
            abiFilters 'armeabi-v7a'
        }
        externalNativeBuild {
            cmake {
                arguments '-DANDROID_PLATFORM=android-24',
                        '-DANDROID_TOOLCHAIN=clang', '-DANDROID_STL=gnustl_static'
            }
        }
    }
    signingConfigs {
        release {
            storeFile file('./LibreSubstratum.jks')
            storePassword System.getenv("storePassword")
            keyAlias System.getenv("keyAlias")
            keyPassword System.getenv("keyPassword")
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            testCoverageEnabled true
            ext.enableCrashlytics = false
        }
        debugProguarded {
            initWith(buildTypes.debug)
            minifyEnabled true
            ext.enableCrashlytics = false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            matchingFallbacks = ['debug']
        }
    }
    flavorDimensions "store"
    productFlavors {
        play {
            dimension "store"
            versionNameSuffix "-play"
        }
        fdroid {
            dimension "store"
            versionNameSuffix "-fdroid"
        }
    }
    externalNativeBuild {
        cmake {
            path 'src/main/jni/CMakeLists.txt'
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/*.kotlin_module'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'

        //Arrow
        if (!System.getenv("CI")) {
            debug.java.srcDirs += 'build/generated/source/kaptKotlin/fdroidDebug'
        }
//        release.java.srcDirs += 'build/generated/source/kaptKotlin/release'
    }
    dataBinding {
        enabled = true
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
            beforeTest { desc ->
                testLogging.showStandardStreams = true
                println "Executing test ${desc.name} [${desc.className}] with result: STARTED"
            }
            afterTest { desc, result ->
                testLogging.showStandardStreams = true
                println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
            }
        }
    }
//    ImplementationOptions {
//        sourceCompatibility JavaVersion.VERSION_1_8
//        targetCompatibility JavaVersion.VERSION_1_8
//    }

}

task jacocoTestReport(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"
    reports {
        xml.enabled = true
        html.enabled = true
    }
    def fileFilter = ["**/R.class",
                      "**/R\$*.class",
                      "**/BuildConfig.*",
                      "**/Manifest*.*",
                      "android/**/*.*",
                      "**/Lambda\$*.class", //Retrolambda
                      "**/Lambda.class",
                      "**/*Lambda.class",
                      "**/*Lambda*.class",
                      "**/*Lambda*.*",
                      "**/*Builder.*",
                      "**/*_MembersInjector.class", //Dagger2 generated code
                      "**/*_MembersInjector*.*", //Dagger2 generated code
                      "**/*_*Factory*.*", //Dagger2 generated code
                      "**/*Component*.*", //Dagger2 generated code
                      "**/*Module*.*" //Dagger2 generated code
    ]
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/fdroid/debug", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/fdroidDebug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"
    def kotlinSrc = "${project.projectDir}/src/main/kotlin"
    sourceDirectories = files([mainSrc, kotlinSrc])
    classDirectories = files([debugTree, kotlinDebugTree])
    executionData = fileTree(dir: project.projectDir, includes:
            ["**/*.exec" , "**/*.ec"])
}

dependencies {
    api kotlinLib

    //Support library
    supportLibrary.each { name, lib ->
        implementation lib
    }

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutines_version}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${coroutines_version}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:${coroutines_version}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-guava:${coroutines_version}", {
        exclude group: "com.google.guava"
    }

    implementation "android.arch.lifecycle:runtime:${lifecycle_components_version}"
    implementation "android.arch.lifecycle:extensions:${lifecycle_components_version}"
    implementation "android.arch.lifecycle:reactivestreams:${lifecycle_components_version}"
    testImplementation "android.arch.core:core-testing:${lifecycle_components_version}"
    kapt 'com.android.databinding:compiler:3.1.0'

    implementation "com.jereksel:aapt:1.0@aar"

    //RxStuff
    implementation rxjava
    implementation rxkotlin
    implementation rxandroid

//    testCompile 'com.rubylichtenstein:rxtest:1.0.5'

    api  "io.arrow-kt:arrow-optics:$arrow_version"
    kapt "io.arrow-kt:arrow-annotations-processor:$arrow_version"

    //Dagger
    implementation dagger
    kapt daggerCompiler
    kaptTest daggerCompiler
    testImplementation group: 'javax.inject', name: 'javax.inject', version: '1'

    implementation 'eu.chainfire:libsuperuser:1.0.0.201704021214'

    compile 'com.hannesdorfmann.mosby3:mvi:3.1.0'

    compile 'com.android.support.constraint:constraint-layout:1.0.2'

    //Kotterknife
    implementation 'com.jakewharton:kotterknife:0.1.0-20170921.134610-22', {
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }

    implementation 'com.jakewharton.rxrelay2:rxrelay:2.0.0'

    implementation 'com.github.clans:fab:1.6.4'
    implementation "com.github.akarnokd:rxjava2-extensions:0.18.9"
    implementation 'org.zeroturnaround:zt-zip:1.12'

    //Logging
    implementation "com.github.tony19:logback-android-core:$logback_android_version"
    implementation("com.github.tony19:logback-android-classic:$logback_android_version") {
        exclude group: 'com.google.android'
    }

    implementation slf4japi
    playImplementation('com.crashlytics.sdk.android:crashlytics:2.9.1@aar') {
        transitive = true
    }

    implementation group: 'commons-codec', name: 'commons-codec', version: '1.11'

    implementation 'com.github.deano2390:MaterialShowcaseView:1.2.0@aar'

    implementation "com.github.marcinmoskala.activitystarter:activitystarter:$activity_starter_version"
    kapt "com.github.marcinmoskala.activitystarter:activitystarter-compiler:$activity_starter_version"

    implementation anko
    implementation ankoRecyclerView

    implementation 'com.github.kittinunf.result:result:1.3.0'

    //Signing
    implementation project(":zipsigner:combined")

    implementation project(":libs:changelogdialog")

    api 'com.squareup.picasso:picasso:2.71828'

    implementation 'com.jereksel:omslib:1.0.2'

    //So Proguard would shut up
    implementation 'com.google.j2objc:j2objc-annotations:1.3'
    implementation 'com.google.errorprone:error_prone_annotations:2.2.0'
    implementation guava
    androidTestImplementation guava
//    Implementation 'com.android.tools.build:apksig:2.3.0-alpha3'

    implementation 'cat.ereza:customactivityoncrash:2.2.0'

    implementation project(":sublib:models")
    implementation project(":sublib:themereaderassetmanager")
    implementation project(path: ':sublib:compilercommon')
    implementation project(':sublib:compilerassetmanager')

    implementation "android.arch.lifecycle:runtime:1.1.1"

    //Testing
    testImplementation junit

    testImplementation kotlinReflect
    testImplementation mockito
    testImplementation robolectric

    testImplementation("com.android.support.test:runner:1.0.2-alpha1")

    //DON'T UPDATE: https://github.com/kotlintest/kotlintest/issues/174
    testImplementation ("io.kotlintest:kotlintest:$kotlintest_version") {
        exclude group: "org.jetbrains.kotlin"
    }
    testImplementation ("com.nhaarman:mockito-kotlin:$mockito_kotlin_version") {
        exclude group: "org.jetbrains.kotlin"
    }

    //assertj android
    testImplementation ("com.squareup.assertj:assertj-android:$assertj_android_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation "com.squareup.assertj:assertj-android-support-v4:$assertj_android_version@aar"
    testImplementation "com.squareup.assertj:assertj-android-play-services:$assertj_android_version@aar"
    testImplementation "com.squareup.assertj:assertj-android-appcompat-v7:$assertj_android_version@aar"
    testImplementation "com.squareup.assertj:assertj-android-design:$assertj_android_version@aar"
    testImplementation "com.squareup.assertj:assertj-android-mediarouter-v7:$assertj_android_version@aar"
    testImplementation "com.squareup.assertj:assertj-android-gridlayout-v7:$assertj_android_version@aar"
    testImplementation "com.squareup.assertj:assertj-android-cardview-v7:$assertj_android_version@aar"
    testImplementation "com.squareup.assertj:assertj-android-recyclerview-v7:$assertj_android_version@aar"
    testImplementation "com.squareup.assertj:assertj-android-palette-v7:$assertj_android_version@aar"
}

play {
    if (branch == "master") {
        track = 'production'
    } else {
        track = 'beta'
    }
    untrackOld = true
    uploadImages = true
}

androidExtensions {
    experimental = true
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

task testAll() {
    dependsOn("testFdroidDebugUnitTest")
    dependsOn(":sublib:colorreader:test")
    dependsOn(":sublib:compilerassetmanager:test")
    dependsOn(":sublib:themereaderassetmanager:test")
}

task generateReports() {
    dependsOn(":app:jacocoTestReport")
    dependsOn(":sublib:compilerassetmanager:jacocoTestReportDebug")
    dependsOn(":sublib:themereaderassetmanager:jacocoTestReportDebug")
}
